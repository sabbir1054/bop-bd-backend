// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANUFACTURER
  IMPORTER
  WHOLESALER
  DEALER
  RESELLER
  STAFF
}

enum MemberCategory {
  SILVER
  GOLD
  PLATINUM
  NORMAL
}

enum OrderStatus {
  PENDING
  ACCEPTED
  CANCEL
  SHIPPING
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum StaffRole {
  NORMAL_STAFF
  ADMIN
  STORE_MANAGER
  DELIVERY_BOY
  ACCOUNTS_MANAGER
  PURCHASE_OFFICER
}

model Staff {
  id             String       @id @default(uuid())
  role           StaffRole
  salary         Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("staff")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @unique
  staff     Staff[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("organizations")
}

model RevenueShare {
  id         String   @id @default(uuid())
  userRole   Role
  percentage Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("revenue_share")
}

model BusinessType {
  id        String     @id @default(uuid())
  typeName  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User[]
  category  Category[]

  @@map("business_type")
}

model User {
  id             String         @id @default(uuid())
  role           Role
  memberCategory MemberCategory @default(NORMAL)
  verified       Boolean        @default(false)
  name           String?
  email          String?        @unique
  phone          String         @unique
  address        String?
  photo          String?
  password       String
  license        String?
  nid            String?
  shop_name      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  feedbacks      Feedback[]
  cart           Cart[]
  products       Product[]
  outgoing_order Order[]        @relation("customer_orders")
  incoming_order Order[]        @relation("product_seller_orders")
  businessType   BusinessType?  @relation(fields: [businessTypeId], references: [id])
  businessTypeId String?
  organizationId String?
  organization   Organization?
  otp            String?
  token          String?

  @@map("users")
}

model Category {
  id             String       @id @default(uuid())
  eng_name       String
  bn_name        String
  products       Product[]
  businessType   BusinessType @relation(fields: [businessTypeId], references: [id])
  businessTypeId String
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())

  @@map("categories")
}

model Product {
  id             String      @id @default(uuid())
  name           String
  description    String?
  owner          User        @relation(fields: [ownerId], references: [id])
  sku            String
  buying_price   Float?
  price          Float
  discount_price Float?
  stock          Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  images         Image[]
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     String
  feedbacks      Feedback[]
  OrderItem      OrderItem[]
  CartItem       CartItem[]
  ownerId        String

  @@map("products")
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("images")
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Float
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("feedbacks")
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  userId    String
  CartItem  CartItem[]

  @@map("cart")
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  cartId    String
  productId String

  @@map("cart_item")
}

model Order {
  id                String        @id @default(uuid())
  orderCode         String        @unique
  total             Float
  orderStatus       OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  customer          User          @relation("customer_orders", fields: [customerId], references: [id])
  customerId        String
  product_seller    User          @relation("product_seller_orders", fields: [product_seller_id], references: [id])
  product_seller_id String
  shipping_address  String
  updatedAt         DateTime      @updatedAt
  createdAt         DateTime      @default(now())
  orderItems        OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  productId String
  orderId   String

  @@map("order_items")
}
