// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    SUPER_ADMIN
    ADMIN
    MANUFACTURER
    IMPORTER
    WHOLESALER
    DEALER
    RESELLER
    STAFF
}

enum MemberCategory {
    SILVER
    GOLD
    PLATINUM
    NORMAL
}

enum OrderStatus {
    PENDING
    ACCEPTED
    CANCEL
    SHIPPING
    DELIVERED
}

enum PaymentStatus {
    PENDING
    PAID
}

enum StaffRole {
    ORDER_SUPERVISOR
    STAFF_ADMIN
    STORE_MANAGER
    DELIVERY_BOY
    ACCOUNTS_MANAGER
    PURCHASE_OFFICER
}

model RevenueShare {
    id         String   @id @default(uuid())
    userRole   Role
    percentage Float
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("revenue_share")
}

model BusinessType {
    id           String         @id @default(uuid())
    typeName     String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    organization Organization[]
    category     Category[]

    @@map("business_type")
}

model OneTimePassword {
    id            String   @id @default(uuid())
    phone         String   @unique
    otpCode       String
    resendCounter Int
    checkCounter  Int
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@map("one_time_password")
}

model OrderOtp {
    id         String   @id @default(uuid())
    phone      String
    otpCode    String
    countSend  Int
    orderId    String   @unique
    isVerified Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Order      Order    @relation(fields: [orderId], references: [id])

    @@map("orderOtp")
}

model Organization {
    id             String        @id @default(uuid())
    name           String?
    owner          User          @relation(fields: [ownerId], references: [id])
    ownerId        String        @unique
    staff          Staff[]
    updatedAt      DateTime      @updatedAt
    createdAt      DateTime      @default(now())
    products       Product[]
    feedbacks      Feedback[]
    cart           Cart[]
    outgoing_order Order[]       @relation("customer_orders")
    incoming_order Order[]       @relation("product_seller_orders")
    BusinessType   BusinessType? @relation(fields: [businessTypeId], references: [id])
    businessTypeId String?

    @@map("organizations")
}

model User {
    id               String         @id @default(uuid())
    role             Role
    memberCategory   MemberCategory @default(NORMAL)
    verified         Boolean        @default(false)
    name             String?
    email            String?        @unique
    phone            String         @unique
    address          String?
    photo            String?
    password         String
    license          String?
    nid              String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    organizationId   String?
    organization     Organization?
    token            String?
    Staff            Staff?
    isMobileVerified Boolean        @default(false)
    isEmailVerified  Boolean        @default(false)
    isNidVerified    Boolean        @default(false)

    @@map("users")
}

model Category {
    id             String       @id @default(uuid())
    eng_name       String
    bn_name        String
    photo          String?
    products       Product[]
    businessType   BusinessType @relation(fields: [businessTypeId], references: [id])
    businessTypeId String
    updatedAt      DateTime     @updatedAt
    createdAt      DateTime     @default(now())

    @@map("categories")
}

model Product {
    id             String       @id @default(uuid())
    name           String
    description    String?
    sku            String
    buying_price   Float?
    price          Float
    discount_price Float?
    stock          Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    images         Image[]
    category       Category     @relation(fields: [categoryId], references: [id])
    categoryId     String
    feedbacks      Feedback[]
    OrderItem      OrderItem[]
    CartItem       CartItem[]
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    @@map("products")
}

model Image {
    id        String   @id @default(uuid())
    url       String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@map("images")
}

model Feedback {
    id             String        @id @default(uuid())
    rating         Float
    comment        String
    product        Product       @relation(fields: [productId], references: [id])
    productId      String
    updatedAt      DateTime      @updatedAt
    createdAt      DateTime      @default(now())
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    @@map("feedbacks")
}

model Cart {
    id String @id @default(uuid())

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    CartItem       CartItem[]
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    @@map("cart")
}

model CartItem {
    id        String   @id @default(uuid())
    quantity  Int
    product   Product  @relation(fields: [productId], references: [id])
    cart      Cart     @relation(fields: [cartId], references: [id])
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    cartId    String
    productId String

    @@map("cart_item")
}

model Order {
    id                 String              @id @default(uuid())
    orderCode          String              @unique
    total              Float
    orderStatus        OrderStatus         @default(PENDING)
    paymentStatus      PaymentStatus       @default(PENDING)
    customer           Organization        @relation("customer_orders", fields: [customerId], references: [id])
    customerId         String
    product_seller     Organization        @relation("product_seller_orders", fields: [product_seller_id], references: [id])
    product_seller_id  String
    shipping_address   String
    updatedAt          DateTime            @updatedAt
    createdAt          DateTime            @default(now())
    orderItems         OrderItem[]
    assigndForDelivery AssigndForDelivery?
    OrderOtp           OrderOtp[]

    @@map("orders")
}

model OrderItem {
    id        String   @id @default(uuid())
    quantity  Int
    price     Float
    product   Product  @relation(fields: [productId], references: [id])
    order     Order    @relation(fields: [orderId], references: [id])
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    productId String
    orderId   String

    @@map("order_items")
}

model Staff {
    id                 String               @id @default(uuid())
    role               StaffRole
    salary             Float?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    organization       Organization         @relation(fields: [organizationId], references: [id])
    organizationId     String
    staffInfo          User                 @relation(fields: [staffInfoId], references: [id])
    staffInfoId        String               @unique
    assignedBy         AssigndForDelivery[] @relation("assignedByStaff")
    AssigndForDelivery AssigndForDelivery[] @relation("deliveryBy")
    deliveryArea       String?

    @@map("staff")
}

model AssigndForDelivery {
    id                String   @id @default(uuid())
    updatedAt         DateTime @updatedAt
    createdAt         DateTime @default(now())
    assignedby        Staff    @relation("assignedByStaff", fields: [assignedbyStaffId], references: [id])
    assignedbyStaffId String
    deliveryBoy       Staff    @relation("deliveryBy", fields: [deliveryBoyId], references: [id])
    deliveryBoyId     String
    order             Order    @relation(fields: [orderId], references: [id])
    orderId           String   @unique

    @@map("assigned_for_delivery")
}
