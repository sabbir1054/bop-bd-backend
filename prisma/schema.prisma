// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    SUPER_ADMIN
    ADMIN
    MANUFACTURER
    IMPORTER
    WHOLESALER
    DEALER
    RESELLER
    STAFF
}

enum OrderStatus {
    PENDING
    ACCEPTED
    CANCEL
    SHIPPING
    DELIVERED
}

enum PaymentStatus {
    PENDING
    PAID
}

enum StaffRole {
    ORDER_SUPERVISOR
    STAFF_ADMIN
    STORE_MANAGER
    DELIVERY_BOY
    ACCOUNTS_MANAGER
    PURCHASE_OFFICER
}

model RevenueShare {
    id         String   @id @default(uuid())
    userRole   Role
    percentage Float
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("revenue_share")
}

//* App-> Category
model BusinessType {
    id           String         @id @default(uuid())
    typeName     String
    typeName_bn  String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    organization Organization[]
    category     Category[]

    @@map("business_type")
}

model OneTimePassword {
    id            String   @id @default(uuid())
    phone         String   @unique
    otpCode       String
    resendCounter Int
    checkCounter  Int
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@map("one_time_password")
}

model OrderOtp {
    id         String   @id @default(uuid())
    phone      String
    otpCode    String
    countSend  Int
    orderId    String   @unique
    isVerified Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Order      Order    @relation(fields: [orderId], references: [id])

    @@map("orderOtp")
}

model Organization {
    id                       String                            @id @default(uuid())
    name                     String?
    photo                    String?
    owner                    User                              @relation(fields: [ownerId], references: [id])
    ownerId                  String                            @unique
    staff                    Staff[]
    updatedAt                DateTime                          @updatedAt
    createdAt                DateTime                          @default(now())
    products                 Product[]
    feedbacks                Feedback[]
    cart                     Cart[]
    outgoing_order           Order[]                           @relation("customer_orders")
    incoming_order           Order[]                           @relation("product_seller_orders")
    BusinessType             BusinessType?                     @relation(fields: [businessTypeId], references: [id])
    businessTypeId           String?
    ownerRefferedCode        RefferedCode[]                    @relation("code_owner_organization")
    PaymentSystemOptions     PaymentSystemOptions[]
    OrganizationRewardPoints OrganizationRewardPointsHistory[]
    PayCommission            PayCommission[]
    totalRewardPoints        Int                               @default(0)
    ClaimReward              ClaimReward[]
    memberShipCategory       MembershipCategory                @default(NORMAL)
    UsedReffereCode          UsedReffereCode?
    totlaCommission          Float                             @default(0)

    @@map("organizations")
}

model User {
    id               String        @id @default(uuid())
    role             Role
    verified         Boolean       @default(false)
    name             String?
    email            String?       @unique
    phone            String        @unique
    address          String?
    photo            String?
    password         String
    license          String?
    nid              String?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    organizationId   String?
    organization     Organization?
    token            String?
    Staff            Staff?
    isMobileVerified Boolean       @default(false)
    isEmailVerified  Boolean       @default(false)
    isNidVerified    Boolean       @default(false)

    @@map("users")
}

//* App-> SubCategory
model Category {
    id             String       @id @default(uuid())
    eng_name       String
    bn_name        String
    photo          String?
    products       Product[]
    businessType   BusinessType @relation(fields: [businessTypeId], references: [id])
    businessTypeId String
    updatedAt      DateTime     @updatedAt
    createdAt      DateTime     @default(now())

    @@map("categories")
}

model Product {
    id             String       @id @default(uuid())
    name           String
    description    String?
    sku            String
    buying_price   Float?
    price          Float
    discount_price Float?
    stock          Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    images         Image[]
    category       Category     @relation(fields: [categoryId], references: [id])
    categoryId     String
    feedbacks      Feedback[]
    OrderItem      OrderItem[]
    CartItem       CartItem[]
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    @@map("products")
}

model Image {
    id        String   @id @default(uuid())
    url       String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@map("images")
}

model Feedback {
    id             String        @id @default(uuid())
    rating         Float
    comment        String
    product        Product       @relation(fields: [productId], references: [id])
    productId      String
    updatedAt      DateTime      @updatedAt
    createdAt      DateTime      @default(now())
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    @@map("feedbacks")
}

model Cart {
    id String @id @default(uuid())

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    CartItem       CartItem[]
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    @@map("cart")
}

model CartItem {
    id        String   @id @default(uuid())
    quantity  Int
    product   Product  @relation(fields: [productId], references: [id])
    cart      Cart     @relation(fields: [cartId], references: [id])
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    cartId    String
    productId String

    @@map("cart_item")
}

//* totla = withoutdelivery charge
model Order {
    id                       String                     @id @default(uuid())
    orderCode                String                     @unique
    total                    Float
    orderStatus              OrderStatus                @default(PENDING)
    paymentStatus            PaymentStatus              @default(PENDING)
    customer                 Organization               @relation("customer_orders", fields: [customerId], references: [id])
    customerId               String
    product_seller           Organization               @relation("product_seller_orders", fields: [product_seller_id], references: [id])
    product_seller_id        String
    shipping_address         String
    updatedAt                DateTime                   @updatedAt
    createdAt                DateTime                   @default(now())
    orderItems               OrderItem[]
    assigndForDelivery       AssigndForDelivery?
    OrderOtp                 OrderOtp[]
    Order_Commission_History Order_Commission_History[]
    orderPaymentInfo         OrderPaymentInfo?
    deliveryCharge           Float?
    totalWithDeliveryCharge  Float

    @@map("orders")
}

model OrderItem {
    id        String   @id @default(uuid())
    quantity  Int
    price     Float
    product   Product  @relation(fields: [productId], references: [id])
    order     Order    @relation(fields: [orderId], references: [id])
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    productId String
    orderId   String

    @@map("order_items")
}

model Staff {
    id                 String               @id @default(uuid())
    role               StaffRole
    salary             Float?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    organization       Organization         @relation(fields: [organizationId], references: [id])
    organizationId     String
    staffInfo          User                 @relation(fields: [staffInfoId], references: [id])
    staffInfoId        String               @unique
    assignedBy         AssigndForDelivery[] @relation("assignedByStaff")
    AssigndForDelivery AssigndForDelivery[] @relation("deliveryBy")
    deliveryArea       String?

    @@map("staff")
}

model AssigndForDelivery {
    id                String   @id @default(uuid())
    updatedAt         DateTime @updatedAt
    createdAt         DateTime @default(now())
    assignedby        Staff    @relation("assignedByStaff", fields: [assignedbyStaffId], references: [id])
    assignedbyStaffId String
    deliveryBoy       Staff    @relation("deliveryBy", fields: [deliveryBoyId], references: [id])
    deliveryBoyId     String
    order             Order    @relation(fields: [orderId], references: [id])
    orderId           String   @unique

    @@map("assigned_for_delivery")
}

enum CommissionType {
    NORMAL
    REFERRED_MEMBER
    SPECIAL_OFFER
}

model Commission {
    id                       String                     @id @default(uuid())
    commissionType           CommissionType
    percentage               Float
    isValid                  Boolean                    @default(true)
    ref_mem_validity         Int?
    membershipCategory       MembershipCategory
    referCodes               RefferedCode[]
    updatedAt                DateTime                   @updatedAt
    createdAt                DateTime                   @default(now())
    Order_Commission_History Order_Commission_History[]

    @@map("commission")
}

model ValidityDays {
    id        String   @id @default(uuid())
    validDays Int      @default(30)
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@map("validDays")
}

model RefferedCode {
    id                          String            @id @default(uuid())
    code                        String            @unique
    validUntil                  DateTime
    isValid                     Boolean           @default(true)
    commission                  Commission        @relation(fields: [commissionId], references: [id])
    commissionId                String
    codeOwnerOrganization       Organization      @relation("code_owner_organization", fields: [codeOwnerorganizationId], references: [id])
    codeOwnerorganizationId     String
    updatedAt                   DateTime          @updatedAt
    createdAt                   DateTime          @default(now())
    organizationUsedReffereCode UsedReffereCode[]
    joiningRewardPoints         RewardPoints      @relation("joining_Reward_code", fields: [joiningRewardPointsId], references: [id])
    joiningRewardPointsId       String
    buyingRewardPoints          RewardPoints      @relation("buying_Reward_code", fields: [buyingRewardPointsId], references: [id])
    buyingRewardPointsId        String

    sellingRewardPoints   RewardPoints @relation("selling_Reward_code", fields: [sellingRewardPointsId], references: [id])
    sellingRewardPointsId String

    @@map("refer_code")
}

model UsedReffereCode {
    id             String       @id @default(uuid())
    refferCode     RefferedCode @relation(fields: [refferedCodeId], references: [id])
    organization   Organization @relation(fields: [organizationId], references: [id])
    updatedAt      DateTime     @updatedAt
    createdAt      DateTime     @default(now())
    refferedCodeId String
    organizationId String       @unique

    @@map("used_refferCode")
}

enum OrderPaymentCategory {
    MOBILE_BANKING
    BANK_TRANSACTION
    CASH_ON_DELIVERY
}

model PaymentSystemOptions {
    id               String               @id @default(uuid())
    paymentCategory  OrderPaymentCategory
    methodName       String
    accountNumber    String? // Account number associated with the payment method
    description      String? // Additional details about the payment method
    organization     Organization         @relation(fields: [organizationId], references: [id])
    organizationId   String // Reference to the organization that owns this payment method
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    OrderPaymentInfo OrderPaymentInfo[]
    PayCommission    PayCommission[]

    @@map("payment_systems_options")
}

model OrderPaymentInfo {
    id                     String               @id @default(uuid())
    order                  Order                @relation(fields: [orderId], references: [id])
    orderId                String               @unique
    updatedAt              DateTime             @updatedAt
    createdAt              DateTime             @default(now())
    paymentSystemOptions   PaymentSystemOptions @relation(fields: [paymentSystemOptionsId], references: [id])
    paymentSystemOptionsId String

    @@map("order_payment_info")
}

model Order_Commission_History {
    id               String @id @default(uuid())
    order            Order  @relation(fields: [orderId], references: [id])
    orderId          String
    commissionAmount Float

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    commission   Commission @relation(fields: [commissionId], references: [id])
    commissionId String

    @@map("order_commission_history")
}

enum RewardPointsType {
    JOINING
    BUYING
    SELLING
}

model RewardPoints {
    id                       String                            @id @default(uuid())
    rewardType               RewardPointsType
    membershipCategory       MembershipCategory
    points                   Int                               @default(0)
    updatedAt                DateTime                          @updatedAt
    createdAt                DateTime                          @default(now())
    organizationRewardPoints OrganizationRewardPointsHistory[]
    joiningRefferedCode      RefferedCode[]                    @relation("joining_Reward_code")
    buyingRefferedCode       RefferedCode[]                    @relation("buying_Reward_code")
    sellingRefferedCode      RefferedCode[]                    @relation("selling_Reward_code")

    @@map("reward_points")
}

enum OrgaRewardPointHistoryType {
    IN
    OUT
}

model OrganizationRewardPointsHistory {
    id               String                     @id @default(uuid())
    pointHistoryType OrgaRewardPointHistoryType
    reward           RewardPoints               @relation(fields: [rewardPointsId], references: [id])
    rewardPointsId   String
    points           Int
    organization     Organization               @relation(fields: [organizationId], references: [id])
    organizationId   String
    updatedAt        DateTime                   @updatedAt
    createdAt        DateTime                   @default(now())

    @@map("organization_rewad_points_history")
}

model CommissionTrnxToken {
    id        String @id @default(uuid())
    paymentID String @unique
    token     String

    @@map("commissionTrnxToken")
}

model PayCommission {
    id                 String                            @id @default(uuid())
    paymentMethod      PaymentSystemOptions              @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId    String
    organization       Organization                      @relation(fields: [organizationId], references: [id])
    organizationId     String
    totalPayable       Float
    adjustReward       Float
    amountPay          Float                             @unique
    updatedAt          DateTime                          @updatedAt
    createdAt          DateTime                          @default(now())
    transactionDetails TransactionInfoForPayCommission[]

    @@map("payCommission")
}

model TransactionInfoForPayCommission {
    id                    String        @id @default(uuid())
    paymentID             String        @unique
    trxID                 String        @unique
    transactionStatus     String
    amount                Float
    currency              String
    intent                String
    paymentExecuteTime    DateTime
    merchantInvoiceNumber String
    payerType             String
    payerReference        String
    customerMsisdn        String
    payerAccount          String
    statusCode            String
    statusMessage         String
    updatedAt             DateTime      @updatedAt
    createdAt             DateTime      @default(now())
    payCommission         PayCommission @relation(fields: [payCommissionId], references: [id])
    payCommissionId       String

    @@map("transactionInfoForCommissionPay")
}

model ClaimReward {
    id             String       @id @default(uuid())
    claimedAmount  Float
    oranization    Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    updatedAt      DateTime     @updatedAt
    createdAt      DateTime     @default(now())

    @@map("claime_reward")
}

model PointsValue {
    id          String   @id @default(uuid())
    perPointsTk Float    @default(1.00)
    updatedAt   DateTime @updatedAt
    createdAt   DateTime @default(now())

    @@map("pointsValue")
}

enum MembershipCategory {
    DIAMOND
    GOLD
    SILVER
    PLATINUM
    NORMAL
}
